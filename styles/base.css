/*
I guess this global rule is appropriate
considering Bootstrap has been
doing so for ages now.
*/
*,
*:before,
*:after
{
  box-sizing : border-box;
}

html, body
{
	/* Removes higlight on tap on mobile devices. */
	-webkit-tap-highlight-color : transparent;
}

body
{
	/* Disables "double tap to zoom in" on mobile devices. */
	/* https://stackoverflow.com/questions/46167604/iphone-html-disable-double-tap-to-zoom */
	touch-action: manipulation;
}

/* `html` is required in order for `rem`s to work. */
/* Also doesn't work without `body` for some weird reason. */
html, body {
	font-family: var(--Document-fontFamily);
	font-size: var(--Document-fontSize);
	font-weight: var(--Document-fontWeight);
	@mixin xxs {
		--Document-fontSize: var(--Document-fontSize--xxs);
	}
	@mixin xs {
		--Document-fontSize: var(--Document-fontSize--xs);
	}
	@mixin s {
		--Document-fontSize: var(--Document-fontSize--s);
	}
	@mixin m {
		--Document-fontSize: var(--Document-fontSize--m);
	}
	@mixin l-plus {
		--Document-fontSize: var(--Document-fontSize--m);
	}
}

input, textarea, select, table
{
	font-family: inherit;
	font-size: inherit;
}

body {
	margin: 0;
	/* Always shows the vertical scrollbar so that
	   it doesn't appear/disappear on different pages. */
	overflow-y: scroll;
}

/* Set `<body/>` background color
   in order to show correct color when scrolling
   past top/bottom of the page on touch devices. */
.document--background {
	color: var(--Document-color);
	background-color: var(--Document-backgroundColor);
	background-image: var(--Document-backgroundImage);
}

a {
	color: var(--Clickable-color--text);
	text-decoration: none;
	&:active {
		color: var(--Clickable-color--textActive);
	}
}

strong {
	font-weight: var(--Content-fontWeight--bold);
}

.link--block {
	display: block;
	color: initial;
}

/* Internet Explorer adds borders around all images */
img {
	border: none;
}

.dark img {
	/* Darken pictures in "Dark Mode". */
	filter: var(--Picture-filter);
}

p {
	line-height: var(--Document-lineHeight);
	margin-top: 1em;
	margin-bottom: 0;
}

pre, code {
	font-family: var(--Document-fontFamily--monospace);
}

.position-relative {
	position: relative;
}

::selection {
	color: var(--Selection-color);
	background-color: var(--Selection-backgroundColor);
}

.no-margin-collapse {
	/* `overflow: hidden` won't do because it hides `box-shadow`. */
	/*overflow: hidden;*/
}

/*
Alternative:
.no-margin-collapse:before,
.no-margin-collapse:after {
	content: ' ';
	display: table;
}
*/

/* Alternatlive:
This won't work for captchan's board page,
because this way the spacing between thread cards
will be clickable (and that would be a bug).
.no-margin-collapse {
	display: flex;
	flex-direction: column;
}
*/

/* The default background color for HTML documents is "white",
   regardless of whether Dark Mode is enabled or not.
   At least, that's how it is in late 2023.
   https://github.com/jgthms/minireset.css/issues/17
   This style sets the default background color to white in Light Mode
   and the font color to black.
*/
@media (prefers-color-scheme: light) {
	body {
		background: white;
		color: black;
	}
}

/* The default background color for HTML documents is "white",
   regardless of whether Dark Mode is enabled or not.
   At least, that's how it is in late 2023.
   https://github.com/jgthms/minireset.css/issues/17
   This style sets the default background color to black in Dark Mode
   and the font color to white, just so that the user is not greeted
   with a flash of white content when navigating to the website
   when being in Dark Mode.
*/
@media (prefers-color-scheme: dark) {
	body {
		background: black;
		color: white;
	}
}

/* When the application controls Dark Mode / Light Mode manually,
   it does so by setting `light` or `dark` CSS class on the `<html/>` element.
   In those cases, it usually does it first thing the scripts start executing,
   in which case there'd be no flash of white content for a Dark Mode user.
*/
.light,
.dark {
	body {
		color: var(--Document-color);
		background-color: var(--Document-backgroundColor);
	}
}